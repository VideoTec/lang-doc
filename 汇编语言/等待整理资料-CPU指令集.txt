2014.10.15 【计划】《怎么判断CPU指令集？怎么用不同的指令集实现相同的功能？》 参考《X264的config.h分析.txt》
2014.10.15 【计划】《x86指令集总结 多媒体指令集 精简指令集（RISC） 复杂指令集（CISC）》
AltiVec是一个浮点和整型单指令流多数据流（SIMD）指令集， 其由苹果，IBM，Freescale Semiconductor（早先的摩托罗拉的半导体部）（合称 AIM联盟），创建并拥有，并由PowerPC版本实现
進階加密標準 (Advanced Encryption Standard，AES) Intel® 進階加密指令集 (Intel® AES-NI)

uint8_t *x264_nal_escape_mmx2( uint8_t *dst, uint8_t *src, uint8_t *end );
uint8_t *x264_nal_escape_sse2( uint8_t *dst, uint8_t *src, uint8_t *end );
uint8_t *x264_nal_escape_avx2( uint8_t *dst, uint8_t *src, uint8_t *end );

typedef struct
{
    uint8_t *(*nal_escape) ( uint8_t *dst, uint8_t *src, uint8_t *end );
    void (*cabac_block_residual_internal)( dctcoef *l, int b_interlaced,
                                           intptr_t ctx_block_cat, x264_cabac_t *cb );
    void (*cabac_block_residual_rd_internal)( dctcoef *l, int b_interlaced,
                                              intptr_t ctx_block_cat, x264_cabac_t *cb );
    void (*cabac_block_residual_8x8_rd_internal)( dctcoef *l, int b_interlaced,
                                                  intptr_t ctx_block_cat, x264_cabac_t *cb );
} x264_bitstream_function_t;

根据不同的CPU，初始化为不同的，实现。
void x264_bitstream_init( int cpu, x264_bitstream_function_t *pf )
{
    memset( pf, 0, sizeof(*pf) );

    pf->nal_escape = x264_nal_escape_c;
#if HAVE_MMX
#if ARCH_X86_64
    pf->cabac_block_residual_internal = x264_cabac_block_residual_internal_sse2;
    pf->cabac_block_residual_rd_internal = x264_cabac_block_residual_rd_internal_sse2;
    pf->cabac_block_residual_8x8_rd_internal = x264_cabac_block_residual_8x8_rd_internal_sse2;
#endif

    if( cpu&X264_CPU_MMX2 )
        pf->nal_escape = x264_nal_escape_mmx2;
    if( cpu&X264_CPU_SSE2 )
    {
#if ARCH_X86_64
        if( cpu&X264_CPU_LZCNT )
        {
            pf->cabac_block_residual_internal = x264_cabac_block_residual_internal_sse2_lzcnt;
            pf->cabac_block_residual_rd_internal = x264_cabac_block_residual_rd_internal_sse2_lzcnt;
            pf->cabac_block_residual_8x8_rd_internal = x264_cabac_block_residual_8x8_rd_internal_sse2_lzcnt;
        }
#endif
        if( cpu&X264_CPU_SSE2_IS_FAST )
            pf->nal_escape = x264_nal_escape_sse2;
    }
#if ARCH_X86_64
    if( cpu&X264_CPU_SSSE3 )
    {
        pf->cabac_block_residual_rd_internal = x264_cabac_block_residual_rd_internal_ssse3;
        pf->cabac_block_residual_8x8_rd_internal = x264_cabac_block_residual_8x8_rd_internal_ssse3;
        if( cpu&X264_CPU_LZCNT )
        {
            pf->cabac_block_residual_rd_internal = x264_cabac_block_residual_rd_internal_ssse3_lzcnt;
            pf->cabac_block_residual_8x8_rd_internal = x264_cabac_block_residual_8x8_rd_internal_ssse3_lzcnt;
        }
    }

    if( cpu&X264_CPU_AVX2 )
    {
        pf->nal_escape = x264_nal_escape_avx2;
        if( cpu&X264_CPU_BMI2 )
            pf->cabac_block_residual_internal = x264_cabac_block_residual_internal_avx2_bmi2;
    }
#endif
#endif
}

2014.10.15 【计划】《cpuid指令，解释》

2014.10.15 【计划】《asm输出函数》 x264ASM assembly language
x86inc.asm: x264asm abstraction layer
http://x264dev.multimedia.cx/archives/191 
1. supports x86_32, x86_64, and win64 (thanks to Anton Mitrofanov),
2. has macros to abstract between MMX and SSE functions

https://wiki.videolan.org/X264_asm_intro/
"cglobal" declares a function accessible from outside of asm

; This is a header file for the x264ASM assembly language, which uses
; NASM/YASM syntax combined with a large number of macros to provide easy
; abstraction between different calling conventions (x86_32, win64, linux64).
; It also has various other useful features to simplify writing the kind of
; DSP functions that are most often used in x264.

; Unlike the rest of x264, this file is available under an ISC license, as it
; has significant usefulness outside of x264 and we want it to be available
; to the largest audience possible.  Of course, if you modify it for your own
; purposes to add a new feature, we strongly encourage contributing a patch
; as this feature might be useful for others as well.  Send patches or ideas
; to x264-devel@videolan.org .

举例说明，输出函数：
cglobal predict_4x4_dc_mmxext, 1,4
"cglobal" declares a function accessible from outside of asm. 
The function's name is x264_predict_4x4_dc_mmxext (the x264_ is auto-added). 

The "1" means "we have one argument. Put it in r0.", (that argument is uint8_t *src). 
If we had a second argument, we'd say "2" and the second one would go in r1 and if we had a third, it'd go in r2, etc. 
So at the start of the function, r0 contains uint8_t *src.

The "4" means we want x264 to give us 4 registers to use. r0, r1, r2, r3. 
This, of course, includes the r0 used for the parameter. 
So in short, after the first line: r0 = src, r1/r2/r3 = free, r4 and up: can't use.


http://blog.csdn.net/xiaoyi247/article/details/7904906
x86inc.asm是x264汇编语言的头文件，和编码算法没有直接的关系，只涉及到跨平台的各种预编译宏




1996-intel-MMX
1998-amd-3DNow!
1999-intel-SSE

AVX(Advanced Vector Extensions) 是Intel的SSE延伸架构
In 2008, Intel announced their planned AVX instruction set which proposed a different way of coding instructions with more than two operands.

FMA                             是Intel的AVX扩充指令集


The XOP (eXtended Operations[1]) instruction set, 
announced by AMD on May 1, 2009, 
is an extension to the 128-bit SSE core instructions in the x86 and AMD64 instruction set for the Bulldozer processor core, 
which was released on October 12, 2011


X264_CPU_BMI1
There are two sets published by Intel: BMI1 and BMI2;
Another two sets were published by AMD: 
ABM (Advanced Bit Manipulation, which is also a subset of SSE4a implemented by Intel as part of SSE4.2 and BMI1)
TBM (Trailing Bit Manipulation, an extension introduced with Piledriver-based processors as an extension to BMI1)

Bit Manipulation Instructions Sets (BMI sets) are extensions to the x86 instruction set architecture for microprocessors from Intel and AMD.
All the instructions in these sets are non-SIMD and operate only on general-purpose registers.


1997年，Intel公司起诉AMD公司与Cyrix公司非法使用（misuse）了商标MMX。随后这起诉讼庭外和解，AMD公司承认MMX为Intel的商标，Intel允许AMD公司使用MMX作为一项技术的名称。在这起诉讼中，AMD披露MMX是Intel命名的矩阵数学扩展（Matrix Math eXtensions）的字母缩写

SIMD多媒体指令集
MMX是由英特尔开发的一种SIMD多媒体指令集，共有57条指令。它于1996年集成在英特尔奔腾 (Pentium) MMX处理器上，以提高其多媒体数据的处理能力
1996年Intel的MMX（AMD认为这是矩阵数学扩充Matrix Math Extensions的缩写，但大多数时候都被当成Multi-Media Extension，而Intel从来没有官方宣布过词源）技术出现

AMD在此（MMX）基础上发展出3D Now!指令集
1998年推出了包含21条指令的3DNow!指令集，并在其K6-2处理器中实现
1999年，随着Athlon处理器的推出，AMD为3DNow!增加了5条新的指令，用于增强其在DSP方面的性能，它们被称为“扩展3DNow!”（Extended 3DNow!）
SIMD指令集方面，AMD跟随Intel，为自己的处理器添加SSE2和SSE3支持，而不再改进3DNow!
2010年八月，AMD宣布将在新一代处理器中取消除了两条数据预取指令之外3DNow!指令的支持，并鼓励开发者将3DNow!代码重新用SSE实现

3D Now!发布一年后，Intel在MMX基础上发展出SSE (Streaming SIMD Extensions)指令集，用来取代MMX
1999年在Pentium-III处理器上推出SSE技术
2001年在Pentium 4上引入了SSE2技术
2004年随着Pentium 4处理器的改版Prescott核心推出。SSE3增加特定的存储器和thread-handling指令来提升Intel超线程的性能，在科学计算方面也有增强
SSE4指令集之首次发表时间为2006年9月的英特尔开发者论坛


AMD新推出FMA指令也 是 AVX 指令集中的一部分


指令集架构
“指令集架构”(英语：Instruction Set Architecture, ISA)。指令集或指令集体系，是计算机体系结构中与程序设计有关的部分，包含了基本数据类型，指令集，寄存器，寻址模式，存储体系，中断，异常处理以及外部I/O。指令集架构包含一系列的opcode即操作码（机器语言），以及由特定处理器执行的基本命令

指令集是存储在CPU内部，对CPU运算进行指导和优化的硬程序。拥有这些指令集，CPU就可以更高效地运行。Intel有x86，x86-64，MMX，SSE，SSE2，SSE3，SSSE3 (Super SSE3)，SSE4.1，SSE4.2和针对64位桌面处理器的EM-64T。AMD主要是3D-Now!指令集


单指令流多数据流
单指令流多数据流（英语：Single Instruction Multiple Data，缩写：SIMD）
是一种采用一个控制器来控制多个处理器，
同时对一组数据（又称“数据矢量”）中的每一个分别执行相同的操作
从而实现空间上的并行性的技术。

在微处理器中，单指令流多数据流技术则是一个控制器控制多个平行的处理微元，
例如Intel的MMX或SSE，以及AMD的3D Now!指令集。

图形处理器(GPU)拥有强大的并发处理能力和可编程流水线，
面对单指令流多数据流时，运算能力远超传统CPU。

OpenCL和CUDA分别是目前最广泛使用的开源和专利通用图形处理器(GPGPU)运算语言。



x86-64（简称x64）
x86-64（简称x64）是64位版本的x86指令集，向前兼容于16位及32位的x86架构。

x64于1999年由AMD设计，AMD首次公开64位集以扩充给x86，称为“AMD64”。

其后也为英特尔所采用，现时英特尔称之为“Intel 64”，
在之前曾使用过“Clackamas Technology” (CT)、“IA-32e”及“EM64T”。

Apple使用"x86-64"或"x86_64"去称呼此64位架构。
太阳微系统（已被甲骨文收购）及Microsoft称它为"x64"。
BSD家族及其他Linux发布版则使用"amd64"，32位版本则称为"i386"。

英特尔原本已经决定在64位的世代完全地舍弃x86兼容性，
推出新的架构称为IA-64技术作为他的Itanium处理器产品线的基础。

IA-64与x86的软件天生不兼容；它使用各种模拟形式来运行x86的软件，不过，以模拟方式来运行的效率十分低下，并且会影响其他程序的运行。

超微主动把32位x86（或称为IA-32）扩充为64位。
它以一个称为AMD64的架构出现（在重命名前也称为x86-64），
且以这个技术为基础的第一个产品是单核心的Opteron和Athlon 64处理器家族。

由于AMD的64位处理器产品线首先进入市场，
且微软也不愿意为英特尔和AMD开发两套不同的64位操作系统，
英特尔也被迫采纳AMD64指令集且增加某些新的扩充到他们自己的产品，
命名为EM64T架构（显然他们不想承认这些指令集是来自它的主要对手），
EM64T后来被英特尔正式更名为Intel 64。


x86是一个指令集架构家族
x86是一个指令集架构家族，最早由英特尔在“Intel 8086”CPU上开发出来

该系列较早期的处理器名称是以数字来表示80x86。
由于以“86”作为结尾，包括Intel 8086、80186、80286、80386以及80486，因此其架构被称为“x86”。

由于数字并不能作为注册商标，因此Intel及其竞争者均在新一代处理器使用可注册的名称，如Pentium。

现时英特尔把x86-32称为IA-32，全名为“Intel Architecture, 32-bit”；不过，由于x86包括16位处理器，这样的命名也出现麻烦。

x86架构于1978年推出的Intel 8086中央处理器中首度出现，
它是从Intel 8008处理器中发展而来的，
而8008则是发展自Intel 4004的。
8086在三年后为IBM PC所选用，之后x86便成为了个人计算机的标准平台，
成为了历来最成功的CPU架构。

8086是16位处理器；直到1985年32位的80386的开发，这个架构都维持是16位。
接着一系列的处理器表示了32位架构的细微改进，推出了数种的扩充，

直到2003年AMD对于这个架构发展了64位的扩充，并命名为AMD64。
后来英特尔也推出了与之兼容的处理器，并命名为Intel 64。
两者一般被统称为x86-64或x64，开创了x86的64位时代

IA-64
IA-64是英特尔公司与惠普公司共同开发的纯64位微处理器。IA是Intel Architecture（英特尔架构）的缩写，64指64位系统。

IA-64架构是EPIC（Explicitly Parallel Instruction Computing）的64位架构。EPIC是基于超长指令字VLIW（Very Long Instruction Word）的设计，通过将多条指令放入一个指令字，有效的提高了CPU各个计算功能部件的利用效率，提高了程序的性能。

使用这种架构的CPU有Itanium和Itanium 2。
2011年3月，甲骨文宣布停止为IA-64开发新软件。但直到2012年，Intel仍然推出新的Itanium处理器，Itanium 9500系列。




E:\x264\common\cpu.c

typedef struct
{
    const char name[16];
    uint32_t flags;
} x264_cpu_name_t;
extern const x264_cpu_name_t x264_cpu_names[];

const x264_cpu_name_t x264_cpu_names[] =
{
#if HAVE_MMX
//  {"MMX",         X264_CPU_MMX},  // we don't support asm on mmx1 cpus anymore
//  {"CMOV",        X264_CPU_CMOV}, // we require this unconditionally, so don't print it
#define MMX2 X264_CPU_MMX|X264_CPU_MMX2|X264_CPU_CMOV
    {"MMX2",        MMX2},
    {"MMXEXT",      MMX2},
    {"SSE",         MMX2|X264_CPU_SSE},
#define SSE2 MMX2|X264_CPU_SSE|X264_CPU_SSE2
    {"SSE2Slow",    SSE2|X264_CPU_SSE2_IS_SLOW},
    {"SSE2",        SSE2},
    {"SSE2Fast",    SSE2|X264_CPU_SSE2_IS_FAST},
    {"SSE3",        SSE2|X264_CPU_SSE3},
    {"SSSE3",       SSE2|X264_CPU_SSE3|X264_CPU_SSSE3},
    {"SSE4.1",      SSE2|X264_CPU_SSE3|X264_CPU_SSSE3|X264_CPU_SSE4},
    {"SSE4",        SSE2|X264_CPU_SSE3|X264_CPU_SSSE3|X264_CPU_SSE4},
    {"SSE4.2",      SSE2|X264_CPU_SSE3|X264_CPU_SSSE3|X264_CPU_SSE4|X264_CPU_SSE42},
#define AVX SSE2|X264_CPU_SSE3|X264_CPU_SSSE3|X264_CPU_SSE4|X264_CPU_SSE42|X264_CPU_AVX
    {"AVX",         AVX},
    {"XOP",         AVX|X264_CPU_XOP},
    {"FMA4",        AVX|X264_CPU_FMA4},
    {"AVX2",        AVX|X264_CPU_AVX2},
    {"FMA3",        AVX|X264_CPU_FMA3},
#undef AVX
#undef SSE2
#undef MMX2
    {"Cache32",         X264_CPU_CACHELINE_32},
    {"Cache64",         X264_CPU_CACHELINE_64},
    {"LZCNT",           X264_CPU_LZCNT},
    {"BMI1",            X264_CPU_BMI1},
    {"BMI2",            X264_CPU_BMI1|X264_CPU_BMI2},
    {"SlowCTZ",         X264_CPU_SLOW_CTZ},
    {"SlowAtom",        X264_CPU_SLOW_ATOM},
    {"SlowPshufb",      X264_CPU_SLOW_PSHUFB},
    {"SlowPalignr",     X264_CPU_SLOW_PALIGNR},
    {"SlowShuffle",     X264_CPU_SLOW_SHUFFLE},
    {"UnalignedStack",  X264_CPU_STACK_MOD4},
#elif ARCH_PPC
    {"Altivec",         X264_CPU_ALTIVEC},
#elif ARCH_ARM
    {"ARMv6",           X264_CPU_ARMV6},
    {"NEON",            X264_CPU_NEON},
    {"FastNeonMRC",     X264_CPU_FAST_NEON_MRC},
#endif
    {"", 0},
};


/* CPU flags */

/* x86 */
#define X264_CPU_CMOV            0x0000001
#define X264_CPU_MMX             0x0000002
#define X264_CPU_MMX2            0x0000004  /* MMX2 aka MMXEXT aka ISSE */
#define X264_CPU_MMXEXT          X264_CPU_MMX2
#define X264_CPU_SSE             0x0000008
#define X264_CPU_SSE2            0x0000010
#define X264_CPU_SSE3            0x0000020
#define X264_CPU_SSSE3           0x0000040
#define X264_CPU_SSE4            0x0000080  /* SSE4.1 */
#define X264_CPU_SSE42           0x0000100  /* SSE4.2 */
#define X264_CPU_LZCNT           0x0000200  /* Phenom support for "leading zero count" instruction. */
#define X264_CPU_AVX             0x0000400  /* AVX support: requires OS support even if YMM registers aren't used. */
#define X264_CPU_XOP             0x0000800  /* AMD XOP */
#define X264_CPU_FMA4            0x0001000  /* AMD FMA4 */
#define X264_CPU_AVX2            0x0002000  /* AVX2 */
#define X264_CPU_FMA3            0x0004000  /* Intel FMA3 */
#define X264_CPU_BMI1            0x0008000  /* BMI1 */
#define X264_CPU_BMI2            0x0010000  /* BMI2 */
/* x86 modifiers */
#define X264_CPU_CACHELINE_32    0x0020000  /* avoid memory loads that span the border between two cachelines */
#define X264_CPU_CACHELINE_64    0x0040000  /* 32/64 is the size of a cacheline in bytes */
#define X264_CPU_SSE2_IS_SLOW    0x0080000  /* avoid most SSE2 functions on Athlon64 */
#define X264_CPU_SSE2_IS_FAST    0x0100000  /* a few functions are only faster on Core2 and Phenom */
#define X264_CPU_SLOW_SHUFFLE    0x0200000  /* The Conroe has a slow shuffle unit (relative to overall SSE performance) */
#define X264_CPU_STACK_MOD4      0x0400000  /* if stack is only mod4 and not mod16 */
#define X264_CPU_SLOW_CTZ        0x0800000  /* BSR/BSF x86 instructions are really slow on some CPUs */
#define X264_CPU_SLOW_ATOM       0x1000000  /* The Atom is terrible: slow SSE unaligned loads, slow
                                             * SIMD multiplies, slow SIMD variable shifts, slow pshufb,
                                             * cacheline split penalties -- gather everything here that
                                             * isn't shared by other CPUs to avoid making half a dozen
                                             * new SLOW flags. */
#define X264_CPU_SLOW_PSHUFB     0x2000000  /* such as on the Intel Atom */
#define X264_CPU_SLOW_PALIGNR    0x4000000  /* such as on the AMD Bobcat */

/* PowerPC */
#define X264_CPU_ALTIVEC         0x0000001

/* ARM */
#define X264_CPU_ARMV6           0x0000001
#define X264_CPU_NEON            0x0000002  /* ARM NEON */
#define X264_CPU_FAST_NEON_MRC   0x0000004  /* Transfer from NEON to ARM register is fast (Cortex-A9) */













//2010年ARM发布Cortex-15，其具备足够性能进入桌面和服务器领域，开始挑战Intel。 
#define ARCH_ARM 0
#define ARCH_AARCH64 0  //ARM ARCH64: ARMv8 架构中引入新的 AArch64 执行状态

//Alpha处理器最早由DEC公司(迪吉多公司)设计制造
//1998年，随着DEC被一起卖给了康柏。2001年，被康柏卖给Intel。同年，惠普收购康柏，继续开发基于Alpha处理器的产品到2004年
//Microsoft Windows支持这款处理器，直到Windows NT 4.0 SP6，但是从Windows 2000 beta3开始放弃了对Alpha的支援
#define ARCH_ALPHA 0     
                         
						 
//Atmel AVR系列是一种基于改进的哈佛结构、精简指令集（Reduced Instruction Set Computing， RISC）的微控制器，由Atmel公司于1996年研发
//2006年，爱特梅尔推出了 AVR32的新型专利32位架构处理器
//AVR处理器发展了六个系列，分别是：tinyAVR，ATtiny系列；megaAVR，ATmega系列；XMEGA，ATxmega系列
#define ARCH_AVR32 0    //a 32-bit RISC microprocessor architecture designed by Atmel
#define ARCH_AVR32_AP 0  //On April 10, 2012 Atmel announced the End of Life of AP7 Core devices on 4/4/2013
#define ARCH_AVR32_UC 0  //UC3 Core

//Blackfin® 16/32位嵌入式处理器提供软件灵活性和扩展能力，适合融合应用：多格式音频、视频、语音和图像处理、多模式基带和分组处理、控制处理以及实时安全
// Analog Devices, Inc. 全球领先的高性能信号处理解决方案供应商，
//为了满足开发人员对低成本、快速、高效视频技术软件工具日益迫切的需求，
//最近推出一款用于实时视频分析应用的免费综合视频原件库。
//这些软件模块针对 Blackfin 处理器 系列做了充分优化，内含图像处理任务级原件，因而能够加快视频分析应用的开发速度
//IntelliVision 公司的产品一贯受益于 Blackfin 处理器系列的高性能视频处理、压缩和视频流形成功能
//Blackfin处理器基于由ADI和Intel公司联合开发的微信号架构（MSA），
//它将一个32位RISC型指令集和双16位乘法累加（MAC）信号处理功能与通用型微控制器所具有的易用性组合在了一起
//Blackfin处理器是一类专为满足当今嵌入式音频、视频和通信应用的计算要求和功耗约束条件而设计的新型16～32位嵌入式处理器
#define ARCH_BFIN 0

//IA-64 (also called Intel Itanium architecture) is the architecture of the Itanium family of 64-bit Intel microprocessors.
//ia64是一种崭新的系统，和x86架构完全没有相似性
//ia64则是原生的纯64位计算处理器，并且与x86指令不兼容。如果想要执行x86指令需要硬件虚拟化支持，而且效率不高
//ia64由于架构的改变，性能比起x64的64位兼容模式更高更强。
//ia64架构处理器也不能够使用x64操作系统
//x64处理器则可以自由选择x86或是x64操作系统
#define ARCH_IA64 0

//MC68000: 摩托罗拉公司（Motorola）的半导体部门（现已独立成为飞思卡尔公司（Freescale））出品的一款16/32位CISC（复杂指令集）微处理器
//The Motorola 68000 ("'sixty-eight-thousand'"; also called the m68k or Motorola 68k, "sixty-eight-k") is a 16/32-bit[1] CISC microprocessor core 
//Introduced in 1979 with HMOS technology as the first member of the successful 32-bit m68k family of microprocessors
#define ARCH_M68K 0

//MIPS是世界上很流行的一种RISC处理器
//MIPS的意思是“无内部互锁流水级的微处理器”(Microprocessor without interlocked piped stages)，其机制是尽量利用软件办法避免流水线中的数据相关问题
//最早是在80年代初期由斯坦福(Stanford)大学Hennessy教授领导的研究小组研制出来的
//1984年，MIPS计算机公司成立。1992年，SGI收购了MIPS计算机公司。1998年，MIPS脱离SGI，成为MIPS技术公司
//MIPS公司设计RISC处理器始于二十世纪八十年代初，1986年推出R2000处理器，1988年推R3000处理器，1991年推出第一款64位商用微处器R4000。
//之后又陆续推出R8000（于1994年）、R10000（于1996年）和R12000（于1997年）等型号
//1999年，MIPS公司发布MIPS32和MIPS64架构标准，为未来MIPS处理器的开发奠定了基础
//服务器RISC处理器来说，主要是IBM 的POWER和SUN 的UltraSPARC 两大处理器之间的竞争
//2009年6月，龙芯曾经从MIPS公司获得MIPS 32与64架构处理器授权，主要原因是龙芯的处理器架构与MIPS的架构过于相似（95%），龙芯产品涉嫌侵权
//早期ARM的优势就是面积小，其第二大股东是苹果，第一个客户是苹果的PDA牛顿。
//牛顿失败后，被苹果无情抛弃的ARM苦苦挣扎了很多年，被TI、LSI等公司小规模采用完全是因为比MIPS便宜。
//90年代手机开始兴起，为了击败空前强大的摩托罗拉，诺基亚和TI合作，希望开发出首款适用2G网络的通讯芯片。
//TI先后介绍了自家的MCU核心、标准的MIPS核心、以及标准的ARM核心。
//诺基亚的思路是选择一款不被大佬掌控的CPU，这样便于在未来的改进上施加影响，显然只有苦逼的ARM符合要求。
//于是傍着诺基亚的巨型航母，ARM就赶上了移动市场的大潮。
//之后ARM不断在低功耗、Java加速、单指令多数据、代码压缩等方面发力，彻底满足了诺基亚的需求，也拉开了和MIPS的距离。
//MIPS在网络路由等领域有统治地位，看看BRCM，Cisco的产品，连x86都很难比，更不要说ARM了，这些领域都是对速度，吞吐量，外设支持等性能要求极其苛刻的领域
#define ARCH_MIPS 0
#define ARCH_MIPS64 0

//HP（惠普）公司的RISC芯片PA-RISC于1986年问世
//它之后被惠普公司与英特尔联合开发的Itanium架构所取代
#define ARCH_PARISC 0

//POWER是1991年，Apple（苹果电脑）、IBM、Motorola（摩托罗拉）组成的AIM联盟所发展出的微处理器架构
//是一种精简指令集（RISC）架构的中央处理器（CPU）
//PowerPC是整个AIM联盟平台的一部分，并且是到目前为止唯一的一部分
#define ARCH_PPC 0
#define ARCH_PPC64 0

//ESA/390 (Enterprise Systems Architecture/390) was introduced in September 1990[1] and 
//was IBM's last 31-bit-address/32-bit-data mainframe computing design, copied by Amdahl, Hitachi, and Fujitsu among other competitors.
#define ARCH_S390 0

//SuperH（或称SH）是可靠单片机与微处理器架构的品牌名称。SuperH 是以 32 位元存取的精简指令集架构，多用在嵌入式系统
//SuperH 处理器核心家族在九零年代早期由日立开始开发。许多单片机与微处理器都在这个架构下。其中最有名可能是 惠普 Jornada PDA 用的 SH7709
#define ARCH_SH4 0

//SPARC，名称源自于可扩充处理器架构（Scalable Processor ARChitecture）的缩写，是一种RISC指令集架构，
//最早于1985年由太阳微系统所设计，也是SPARC国际公司的注册商标之一
#define ARCH_SPARC 0
#define ARCH_SPARC64 0

//TILE-Gx is a multicore processor family by Tilera.
#define ARCH_TILEGX 0
#define ARCH_TILEPRO 0

//CPU性能瓶颈包括内存墙（CPU和DRAM时钟速度差距）,指令级并行性墙和能耗墙。
//Venray的TOMI(Thread Optimized Multiprocessor)试图通过建造不同类型的微处理器重新定义这些问题
#define ARCH_TOMI 0

#define ARCH_X86 1
#define ARCH_X86_32 1
#define ARCH_X86_64 0