举例说明：Project 即 标签
https://secure.phabricator.com/
在官方的PB系统中，可以看到下面的 Projects:
Feature Request
Badges
Bug Report
Documentation

举例说明：一个任务可以是多个 ”工程“ 的任务：
https://secure.phabricator.com/T10664
可以是 "Bug Report" 同时是 "Feature Request"

http://www.woshipm.com/pd/192245.html

【任务页面】
查看方法1： 主页中；查看方法2：从 Maniphest 应用中查看

个人认为Phabricator之所以能够玩转，
是因为它将任务与项目进行了解耦，很多工具对于任务的认知，
认为任务必须依托于项目而存在，总要有一个space去承载它。
殊不知，这本身就是一个很强烈的绑定。

在phabricator中，
任务不在需要这种强烈的绑定，
任务与项目变成了同级关系，
中间只是一个简单的类似于tag的简单关联，并且随时可以解开。
这样任务就变成了一个单体，
用户不需要奔走于各个项目之间来看自己的任务，
只需要在任务页面，就可以掌握这些任务的归属。 

http://www.woshipm.com/pd/192245.html
所谓的任务、需求、缺陷等等只不过是任务的一个属性，
我们无需去限制用户提交的是什么，
用户可以根据自己的定义来确定它的类别。 -- 使用 tag

标签是一个有效的分组工具，
我们曾经尝试让用户自己去分组管理自己的任务、项目，
但是发现很多场景下，
任务可能需要出现在多个分组中，常见的分组模式无法满足这些需求。
但是分组、分类这种管理方式又存在其特有的便利性，
这时我们引入了标签，
标签可以看成是一个很轻量级的分组方式，
同时其带来的可读性并不比分组来的差，扩展性反而更强。