http://www.infoq.com/cn/articles/functional-reactive-programming

最问题： cbk 的返回值，没有意义

为什么callback风格的代码总是像一坨线团一样那么地杂乱？
让我们先来看看一个通用的event-driven框架大概是什么样的

程序中注册的事件回调处理函数的返回值一般都是什么类型？
想必要么是void要么是一个表示执行状态的状态码，
不太可能让返回值可以随意使用各种数据类型，
这是因为一个事件驱动框架要通用地处理各种callback，
就只能让它的返回值类型足够通用，void便是首选。

因此，回调与回调之间是无法直接传递类型丰富的数据的，
它们只能通过修改应用程序的共享状态来间接地通讯，
这迫使程序员不得不把应用逻辑分割得支离破碎，
从而丧失了核心的组合能力！
这便是callback风格程序的最大问题。

Callback模型关注控制流，
但它对控制流的描述不具有很好的组合性。

FRP模型换了一个视角，关注数据流，且数据流的组合能力极佳，
使得代码更接近于只描述做什么(what)的声明式(declarative)代码，
而不是描述怎么做(how)的命令式(imperative)代码，
相当简洁和直观，更符合人的自然思维!

Promise or Future
在JavaScript社区中很流行的对异步编程的解决方案，有无数的实现库。