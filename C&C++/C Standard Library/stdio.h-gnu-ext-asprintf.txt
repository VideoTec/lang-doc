
http://baike.baidu.com/view/8507235.htm
函数原型：
int asprintf(char **strp, const char *fmt, ...);

功能：
asprintf()可以说是一个增强版的sprintf(),
在不确定字符串的长度时，非常灵活方便，
能够根据格式化的字符串长度，申请足够的内存空间。

此外，使用完后，必须通过free()释放空间。
不过，这是GNU扩展的C函数库，不是标准C函数库或者POSIX。

用法示例：

extern "C" int jniRegisterNativeMethods(C_JNIEnv* env, const char* className,
    const JNINativeMethod* gMethods, int numMethods)
{
    JNIEnv* e = reinterpret_cast<JNIEnv*>(env);

    ALOGV("Registering %s's %d native methods...", className, numMethods);

    scoped_local_ref<jclass> c(env, findClass(env, className));
    if (c.get() == NULL) {
        char* msg;
        asprintf(&msg, "Native registration unable to find class '%s'; aborting...", className);
        e->FatalError(msg);
    }

    if ((*env)->RegisterNatives(e, c.get(), gMethods, numMethods) < 0) {
        char* msg;
        asprintf(&msg, "RegisterNatives failed for '%s'; aborting...", className);
        e->FatalError(msg);
    }

    return 0;
}