struct AVBufferPool {
    AVMutex mutex;
    BufferPoolEntry *pool;

    /*
     * This is used to track when the pool is to be freed.
     * The pointer to the pool itself held by the caller is considered to
     * be one reference. Each buffer requested by the caller increases refcount
     * by one, returning the buffer to the pool decreases it by one.
     * refcount reaches zero when the buffer has been uninited AND all the
     * buffers have been released, then it's safe to free the pool and all
     * the buffers in it.
     */
    volatile int refcount;

    int size;
    AVBufferRef* (*alloc)(int size);
};

volatile[英][ˈvɒlətaɪl] [美][ˈvɑ:lətl]
adj.易变的，不稳定的；（液体或油）易挥发的；爆炸性的；快活的，轻快的

https://zh.wikipedia.org/zh-cn/Volatile%E5%8F%98%E9%87%8F
在程序设计中，尤其是在C语言、C++、C#和Java语言中，
使用volatile关键字声明的变量或对象通常拥有和优化和（或）多线程相关的特殊属性。
通常，volatile关键字用来阻止（伪）编译器对某些其认为无法“被代码本身”改变的代码（变量/对象）进行优化。

如在C语言中，volatile关键字可以用来提醒编译器它后面所定义的变量随时有可能改变，
因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。
如果没有volatile关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，
如果这个变量由别的程序更新了的话，将出现不一致的现象。 
在C环境中，volatile关键字的真实定义和适用范围经常被误解。
虽然C++、C#和Java都从C中神秘地“继承”了volatile，在这些编程语言中volatile的用法和语义却大相径庭。