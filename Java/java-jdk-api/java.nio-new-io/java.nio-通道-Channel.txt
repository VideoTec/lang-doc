基本上，所有的 IO 在NIO 中都从一个Channel 开始。
Channel 有点象流。 
数据可以从Channel读到Buffer中，也可以从Buffer 写到Channel中

JAVA NIO中的一些主要Channel的实现：
FileChannel        从文件中读写数据
DatagramChannel    能通过UDP读写网络中的数据
SocketChannel      能通过TCP读写网络中的数据
ServerSocketChannel  可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel

正如你所看到的，这些通道涵盖了UDP 和 TCP 网络IO，以及文件IO

http://ifeve.com/channels/
Java NIO的通道类似流，但又有些不同：

既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。
通道可以异步地读写。
通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。


RandomAccessFile aFile = new RandomAccessFile("data/nio-data.txt", "rw");
FileChannel inChannel = aFile.getChannel();

ByteBuffer buf = ByteBuffer.allocate(48);

int bytesRead = inChannel.read(buf);

while (bytesRead != -1) {
	System.out.println("Read " + bytesRead);
	buf.flip();  注意 buf.flip() 的调用，首先读取数据到Buffer，然后反转Buffer,接着再从Buffer中读取数据

	while(buf.hasRemaining()){
	System.out.print((char) buf.get());
	}

	buf.clear();
	bytesRead = inChannel.read(buf);
}

aFile.close();