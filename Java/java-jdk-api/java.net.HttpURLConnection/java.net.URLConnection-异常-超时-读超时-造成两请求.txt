Dalvik/2.1.0 (Linux; U; Android 5.1.1; vivo X7 Build/LMY47V)

这个手机，会在读超时后，第二次请求服务器
奇怪的是，fiddler 抓包工具，第二个请求捕获不到

这个重发，不是所有的手机，都这样，请求正常的手机：
Mozilla/5.0 (Linux; Android 6.0; Nexus 6 Build/MRA58K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.133 Mobile Safari/537.36

Mozilla/5.0 (Linux; Android 4.3; zh-cn; SAMSUNG-GT-I9308_TD/1.0 Android/4.3 Release/11.15.2013 Browser/AppleWebKit534.30 Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30

http://stackoverflow.com/questions/27094544/android-java-httpurlconnection-silent-retry-on-read-timeout

http://stackoverflow.com/questions/24417817/stopping-silent-retries-in-httpurlconnection
System.setProperty("sun.net.http.retryPost", "false")
httpURLConnection.setChunkedStreamingMode(0);
https://code.google.com/p/android/issues/detail?id=163595

http://stackoverflow.com/questions/27094544/android-java-httpurlconnection-silent-retry-on-read-timeout/37675253#37675253


    /**
     * Stream a request body whose length is not known in advance. Old HTTP/1.0
     * only servers may not support this mode.
     *
     * <p>When HTTP chunked encoding is used, the stream is divided into
     * chunks, each prefixed with a header containing the chunk's size.
     * A large chunk length requires a large internal buffer, potentially
     * wasting memory. A small chunk length increases the number of
     * bytes that must be transmitted because of the header on every chunk.
     *
     * <p>Implementation details: In some releases the {@code chunkLength} is
     * treated as a hint: chunks sent to the server may actually be larger or
     * smaller. To force a chunk to be sent to the server call
     * {@link java.io.OutputStream#flush()}.
     *
     * @see #setFixedLengthStreamingMode
     * @param chunkLength the length to use, or {@code 0} for the default chunk
     *     length.
     * @throws IllegalStateException if already connected or another mode
     *     already set.
     */
    public void setChunkedStreamingMode(int chunkLength) {
        if (super.connected) {
            throw new IllegalStateException("Already connected");
        }
        if (fixedContentLength >= 0) {
            throw new IllegalStateException("Already in fixed-length mode");
        }
        if (chunkLength <= 0) {
            this.chunkLength = DEFAULT_CHUNK_LENGTH;
        } else {
            this.chunkLength = chunkLength;
        }
    }