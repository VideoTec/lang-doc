List 有序 by-index-访问
Set  根据实现来决定

╔═══════════════════╦══════════════════════╦═════════════════════════════╗
║                   ║         List         ║            Set              ║
╠═══════════════════╬══════════════════════╬═════════════════════════════╣
║     Duplicates    ║          YES         ║            NO               ║
╠═══════════════════╬══════════════════════╬═════════════════════════════╣
║       Order       ║       ORDERED        ║  DEPENDS ON IMPLEMENTATION  ║
╠═══════════════════╬══════════════════════╬═════════════════════════════╣
║ Positional Access ║         YES          ║            NO               ║ 

http://stackoverflow.com/questions/1035008/what-is-the-difference-between-set-and-list

What is the fundamental difference between the Set<E> and List<E> interfaces?

List is an ordered sequence of elements whereas 
Set is a distinct list of elements 
which is unordered (thank you, Quinn Taylor).

List<E>:

An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.

Set<E>:

A collection that contains no duplicate elements. More formally, sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element. As implied by its name, this interface models the mathematical set abstraction.

举例说明：

Ordered lists of element (unique or not)
Conform to Java's interface named List
Can be accessed by index

LinkedList
ArrayList

Lists of unique elements:
Conform to Java's interface named Set
Can not be accessed by index

HashSet (unordered)
LinkedHashSet (ordered)
TreeSet (sorted by natural order or by provided comparator)
Both interfaces Set and List conform to Java's interface named Collection