http://blog.csdn.net/hwz2311245/article/details/51454686

有两种方法可以解决HashMap的线程安全问题：

1) Java的Collections库中的synchronizedMap()方法
2) 使用ConcurrentHashMap

//Hashtable
Map<String, String> normalMap = new Hashtable<String, String>();

//synchronizedMap
synchronizedHashMap = Collections.synchronizedMap(new HashMap<String, String>());

//ConcurrentHashMap
concurrentHashMap = new ConcurrentHashMap<String, String>();

ConcurrentHashMap
当你程序需要高度的并行化的时候，你应该使用ConcurrentHashMap
尽管没有同步整个Map，但是它仍然是线程安全的
读操作非常快，而写操作则是通过加锁完成的
在对象层次上不存在锁（即不会阻塞线程）
锁的粒度设置的非常好，只对哈希表的某一个key加锁
ConcurrentHashMap不会抛出ConcurrentModificationException，即使一个线程在遍历的同时，另一个线程尝试进行修改。
ConcurrentHashMap会使用多个锁

SynchronizedHashMap
会同步整个对象
每一次的读写操作都需要加锁
对整个对象加锁会极大降低性能
这相当于只允许同一时间内至多一个线程操作整个Map，而其他线程必须等待
它有可能造成资源冲突（某些线程等待较长时间）
SynchronizedHashMap会返回Iterator，当遍历时进行修改会抛出异常

http://stackoverflow.com/questions/510632/whats-the-difference-between-concurrenthashmap-and-collections-synchronizedmap

For your needs, use ConcurrentHashMap. 
It allows concurrent modification of the Map from several threads without the need to block them. 
Collections.synchronizedMap(map) 
creates a blocking Map which will degrade performance, 
albeit ensure consistency (if used properly).

Use the second option if you need to ensure data consistency, 
and each thread needs to have an up-to-date view of the map. 
Use the first if performance is critical, and each thread only inserts data to the map, 
with reads happening less frequently.

Please also note that the ConcurrentHashMap does not allow null keys or values. 
So they are NOT equal alternatives of a synchronized map

http://fanli7.net/a/bianchengyuyan/C__/20121024/242016.html

在Java類庫中出現的第一個關聯的集合類是Hashtable，它是JDK 1.0的一部分。
Hashtable提供了一種易於使用的、線程安全的、關聯的map功能，這當然也是方便的。
然而，線程安全性是憑代價換來的——Hashtable的所有方法都是同步的。 
此時，無競爭的同步會導致可觀的性能代價。

Hashtable的後繼者HashMap是作为JDK1.2中的集合框架的一部分出現的，
它通過提供一個不同步的基類和一個同步的包裝器Collections.synchronizedMap，
解决了線程安全性問題。 
通過將基本的功能從線程安全性中分離開來，
Collections.synchronizedMap允許需要同步的用戶可以擁有同步，
而不需要同步的用戶則不必为同步付出代價。

util.concurrent 包中的ConcurrentHashMap類（也將出現在JDK 1.5中的java.util.concurrent包中）
是對Map的線程安全的實現，比起synchronizedMap來，它提供了好得多的並發性。
多個讀操作幾乎總可以並發地執行，
同時進行的讀和寫操作通常也能並發地執行，
而同時進行的寫操作仍然可以不時地並發進行（相關的類也提供了類似的多個讀線程的並發性，但是，只允許有一個活動的寫線程）。
ConcurrentHashMap被設計用來優化檢索操作；
實際上，成功的 get() 操作完成之後通常根本不會有锁着的資源。
要在不使用锁的情況下取得線程安全性需要一定的技巧性，
並且需要對Java內存模型（Java Memory Model）的細節有深入的理解。
ConcurrentHashMap實現，加上util.concurrent包的其他部分，已經被研究正確性和線程安全性的並發專家所正視。
在下個月的文章中，我們將看看ConcurrentHashMap的實現的細節

https://www.ibm.com/developerworks/cn/java/j-jtp07233/
ConcurrentHashMap 和 CopyOnWriteArrayList 提供线程安全性和已改进的可伸缩性

有条件的线程安全性
同步的集合包装器 synchronizedMap 和 synchronizedList ，
有时也被称作 有条件地线程安全――所有 单个的操作都是线程安全的，
但是多个操作组成的操作序列却可能导致数据争用，因为在操作序列中控制流取决于前面操作的结果。 
清单1中第一片段展示了公用的put-if-absent语句块――如果一个条目不在 Map 中，那么添加这个条目。
不幸的是， 在 containsKey() 方法返回到 put() 方法被调用这段时间内，
可能会有另一个线程也插入一个带有相同键的值。
如果您想确保只有一次插入，您需要用一个对 Map m 进行同步的同步块将这一对语句包装起来。

http://blog.sina.com.cn/s/blog_5157093c0100hm3y.html

3. 更好的选择：ConcurrentHashMap

java5中新增了ConcurrentMap接口和它的一个实现类ConcurrentHashMap。
ConcurrentHashMap提供了和Hashtable以及SynchronizedMap中所不同的锁机制。
Hashtable中采用的锁机制是一次锁住整个hash表，
从而同一时刻只能由一个线程对其进行操作；而ConcurrentHashMap中则是一次锁住一个桶。
ConcurrentHashMap默认将hash表分为16个桶，诸如get,put,remove等常用操作只锁当前需要用到的桶。
这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
 
上面说到的16个线程指的是写线程，而读操作大部分时候都不需要用到锁。
只有在size等操作时才需要锁住整个hash表。
 
在迭代方面，ConcurrentHashMap使用了一种不同的迭代方式。
在这种迭代方式中，当iterator被创建后集合再发生改变就不再是抛出ConcurrentModificationException，
取而代之的是在改变时new新的数据从而不影响原有的数据 ，iterator完成后再将头指针替换为新的数据 ，
这样iterator线程可以使用原来老的数据，而写线程也可以并发的完成改变。