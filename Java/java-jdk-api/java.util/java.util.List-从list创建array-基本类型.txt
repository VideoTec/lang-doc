List<String> list = new ArrayList<String>();
//add some stuff
list.add("android");
list.add("apple");
String[] stringArray = list.toArray(new String[0]);  指明了数组类型

http://stackoverflow.com/questions/960431/how-to-convert-listinteger-to-int-in-java

Unfortunately, I don't believe there really is a better way of doing this 
due to the nature of Java's handling of primitive types, 
boxing, arrays and generics. 
In particular:

1) List<T>.toArray won't work because there's no conversion from Integer to int
2) You can't use int as a type argument for generics, 
so it would have to be an int-specific method 
(or one which used reflection to do nasty trickery).

I believe there are libraries 
which have autogenerated versions of this kind of method 
for all the primitive types 
(i.e. there's a template which is copied for each type). 
It's ugly, but that's the way it is I'm afraid :(

Even though the Arrays class came out before generics arrived in Java, 
it would still have to include all the horrible overloads if it were introduced today 
(assuming you want to use primitive arrays).

使用：
org.apache.commons.lang.ArrayUtils - android 没有引用
int[] intArray = ArrayUtils.toPrimitive(myList.toArray(new Integer[myList.size()]));

http://stackoverflow.com/questions/718554/how-to-convert-an-arraylist-containing-integers-to-primitive-int-array

You can convert, but I don't think there's anything built in to do it automatically:

public static int[] convertIntegers(List<Integer> integers)
{
    int[] ret = new int[integers.size()];
    for (int i=0; i < ret.length; i++)
    {
        ret[i] = integers.get(i).intValue();
    }
    return ret;
}

(Note that this will throw a NullPointerException if either integers or any element within it is null.)

nasty[英][ˈnɑ:sti] [美][ˈnæsti]
adj.肮脏的；下流的，令人讨厌的；恶劣的，艰险的；严重的

It might be better to iterate using the List's iterator (with for each) 
so as to avoid performance hits on lists whose access is not O(1).

EDIT: As per comments, you may want to use the list iterator 
to avoid nasty costs with lists such as LinkedList:

public static int[] convertIntegers(List<Integer> integers)
{
    int[] ret = new int[integers.size()];
    Iterator<Integer> iterator = integers.iterator();
    for (int i = 0; i < ret.length; i++)
    {
        ret[i] = iterator.next().intValue();
        这个在 lint 中，警告：Unnecessary unboxing 'iterator.next().intValue()'
        可以直接写成： ret[i] = iterator.net();
    }
    return ret;
}