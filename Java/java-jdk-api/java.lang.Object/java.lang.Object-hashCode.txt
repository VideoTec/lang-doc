
    /**
     * Returns an integer hash code for this object. By contract, any two
     * objects for which {@link #equals} returns {@code true} must return
     * the same hash code value. This means that subclasses of {@code Object}
     * usually override both methods or neither method.
     *
     * <p>Note that hash values must not change over time unless information used in equals
     * comparisons also changes.
     *
     * <p>See <a href="{@docRoot}reference/java/lang/Object.html#writing_hashCode">Writing a correct
     * {@code hashCode} method</a>
     * if you intend implementing your own {@code hashCode} method.
     *
     * @return this object's hash code.
     * @see #equals
     */
    public int hashCode() {
        int lockWord = shadow$_monitor_;
        final int lockWordStateMask = 0xC0000000;  // Top 2 bits.
        final int lockWordStateHash = 0x80000000;  // Top 2 bits are value 2 (kStateHash).
        final int lockWordHashMask = 0x0FFFFFFF;  // Low 28 bits.
        if ((lockWord & lockWordStateMask) == lockWordStateHash) {
            return lockWord & lockWordHashMask;
        }
        return System.identityHashCode(this);
    }

代码：

    public String toString() {
        return "BasicResultProto@" + this
                + "; code:" + code
                + "; reason:" + reason;
    }
    
本意，是想输出，当前对象引用值，结果造成了，调用 this.toString.
因些循环迭代。

解决方法：
http://stackoverflow.com/questions/18396927/how-to-print-the-address-of-an-object-if-you-have-redefined-tostring-method
Anyhow, the way to get this number is to call System.identityHashCode(obj).

http://stackoverflow.com/questions/580984/how-do-you-get-the-object-reference-of-an-object-in-java-when-tostring-and-h
Integer.toHexString(System.identityHashCode(object));

What exactly are you planning on doing with it 
(what you want to do makes a difference with what you will need to call).

hashCode,as defined in the javadocs says:

As much as is reasonably practical, 
the hashCode method defined by class Object does 
return distinct integers for distinct objects. 
(This is typically implemented by converting the internal address of the object into an integer, 
but this implementation technique is not required by the Java™ programming language.)
So if you are using the hashCode to find out 
if it is a unique object in memory that isn't a good way to do it.

System.identityHashCode does the following:

Returns the same hash code for the given object 
as would be returned by the default method hashCode(), 
whether or not the given object's class overrides hashCode(). 
The hash code for the null reference is zero.

Which, for what you are doing sounds like what you want... 
but what you want to do might not be safe depending on how the library is implemented.