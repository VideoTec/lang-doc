annotation[英][ˌænə'teɪʃn] [美][ˌænə'teɪʃn]
n.注释

在已发布的JDK1.5(tiger)中增加新的特色叫 Annotation。
Annotation提供一种机制，将程序的元素如:类，方法，属性，参数，本地变量，包和元数据联系起来

---------------------------------------------------------------------
http://www.cnblogs.com/mandroid/archive/2011/07/18/2109829.html
---------------------------------------------------------------------
Java基础之理解Annotation
Annontation是Java5开始引入的新特征。中文名称一般叫注解。
它提供了一种安全的类似注释的机制，
用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。

更通俗的意思是为程序的元素（类、方法、成员变量）加上更直观更明了的说明，
这些说明信息是与程序的业务逻辑无关，并且是供指定的工具或框架使用的。
Annontation像一种修饰符一样，
应用于包、类型、构造方法、方法、成员变量、参数及本地变量的声明语句中。

Annotation 其实是一种接口。通过Java的反射机制相关的API来访问annotation信息。
相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。
annotation 是不会影响程序代码的执行，无论 annotation 怎么变化，代码都始终如一地执行。

Java语言解释器在工作时会忽略这些annotation，
因此在JVM中这些annotation是“不起作用”的，
只能通过配套的工具才能对这些annontaion类型的信息进行访问和处理。

---------------------------------------------------------------------
http://www.infoq.com/cn/articles/cf-java-annotation
---------------------------------------------------------------------
JDK 5中引入了源代码中的注解（annotation）这一机制。
注解使得Java源代码中不但可以包含功能性的实现代码，还可以添加元数据。
注解的功能类似于代码中的注释，
所不同的是注解不是提供代码功能的说明，而是实现程序功能的重要组成部分。
Java注解已经在很多框架中得到了广泛的使用，用来简化程序中的配置

在一般的Java开发中，最常接触到的可能就是@Override和@SupressWarnings这两个注解了。

1）使用@Override的时候只需要一个简单的声明即可。
这种称为标记注解（marker annotation ），
它的出现就代表了某种配置语义。
而其它的注解是可以有自己的配置参数的。配置参数以名值对的方式出现。

2）使用 @SupressWarnings的时候需要类似
@SupressWarnings({"uncheck", "unused"})这样的语法。
在括号里面的是该注解可供配置的值。
由于这个注解只有一个配置参数，该参数的名称默认为value，并且可以省略。
而花括号则表示是数组类型

------------------------------------
注解的定义有点类似接口
------------------------------------
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface Assignment {
    String assignee();
    int effort();
    double finished() default 0;
} 

retention[英][rɪˈtenʃn] [美][rɪˈtɛnʃən]
n.保留；记忆力，保持力；滞留，扣留；闭尿

@interface用来声明一个注解，
其中的每一个方法实际上是声明了一个配置参数。
方法的名称就是参数的名称，返回值类型就是参数的类型。
可以通过default来声明参数的默认值。
在这里可以看到@Retention和@Target这样的元注解，用来声明注解本身的行为。

@Retention用来声明注解的保留策略，
有CLASS、RUNTIME和SOURCE这三种，
分别表示注解保存在类文件、JVM运行时刻和源代码中。

只有当声明为RUNTIME的时候，
才能够在运行时刻通过反射API来获取到注解的信息。

@Target用来声明注解可以被添加在哪些类型的元素上，
如类型、方法和域等。