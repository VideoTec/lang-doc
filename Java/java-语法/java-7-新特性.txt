http://toughcoder.net/blog/2014/11/12/java-7-and-8-and-android/

Java SE 7新增的语言特性并不是很多，主要有：
1）try 语句资源管理(The try-with-resources Statement)
2）同一catch捕获多个异常(Catching Multiple Exception Types)
3）创建泛型对象时的类型推测(Type inferenes for Generic Instance Creation)
   这个称作 菱形操作符
4）二进制的字面常量(Binary Literals)
5）数值字面常量里的可以有下划线(Underscores in Numeric Literals)
6）switch语句支持String(Strings in switch Statements)
可以看出，其实Java 7并无太大改进，只是多了些语法糖而已。

import java.io.*;
import java.net.*;
import java.util.*;

public class Switch {
    // Underscores in numeric literals
    public static int USER_COUNT_LIMIT = 1_000_000_000;
    public static void main(String[] args) {
        // Type inference when creating generics
        
        List<String> fruits = new ArrayList<>(args.length);
        for (String a : args) {
            fruits.add(a);
        }
        // Strings in switch
        for (String a : fruits) {
            switch (a) {
            case "apple":
                System.out.println("eat an apple a day, the doctors go away");
                break;
            case "orange":
                System.out.println("orange juice");
                break;
            default:
                System.out.println("i do not know what you want");
                break;
            }
        }

        // With 'try-with-resources' no longer need finally to clean up resources.
        try (BufferedReader br = new BufferedReader(new FileReader(args[args.length - 1]))) {
            System.out.println(br.readLine());
            Thread.sleep(1000);
        // Catch multiple exceptions
        } catch (InterruptedException | IOException e) {
            System.out.print(e.getMessage());
        }

        // binary literals
        int userCount = 0b1010101;
        System.out.println("Current we have " + userCount + " users, while limit is " + USER_COUNT_LIMIT);
        if (userCount < USER_COUNT_LIMIT) {
            System.out.println("We are okay, it is under control");
        } else {
            System.out.println("Alert alert alert");
        }
    }
}
