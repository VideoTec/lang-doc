----------------------------------------
下面是 @Override 注释，类。
java.lang.Override.java
----------------------------------------

package java.lang;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Annotation type used to mark methods that override a method declaration in a
 * superclass. Compilers produce an error if a method annotated with @Override
 * does not actually override a method in a superclass.
 *
 * @since 1.5
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.SOURCE)
public @interface Override {
}

@Retention
用来声明注解的保留策略，
有CLASS、RUNTIME和SOURCE这三种，
分别表示注解保存在类文件、JVM运行时刻和源代码中。
只有当声明为RUNTIME的时候，才能够在运行时刻通过反射API来获取到注解的信息。

@Target
用来声明注解可以被添加在哪些类型的元素上，如类型、方法和域等。

------------------------------------
注解的定义有点类似接口
http://www.infoq.com/cn/articles/cf-java-annotation
------------------------------------
retention[英][rɪˈtenʃn] [美][rɪˈtɛnʃən]
n.保留；记忆力，保持力；滞留，扣留；闭尿

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface Assignment {
    String assignee();
    int effort();
    double finished() default 0;
} 

@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。
方法的名称就是参数的名称，返回值类型就是参数的类型。
可以通过default来声明参数的默认值。
在这里可以看到@Retention和@Target这样的元注解，用来声明注解本身的行为。

@Retention
用来声明注解的保留策略，
有CLASS、RUNTIME和SOURCE这三种，
分别表示注解保存在类文件、JVM运行时刻和源代码中。
只有当声明为RUNTIME的时候，才能够在运行时刻通过反射API来获取到注解的信息。
/**
 * Defines an enumeration for annotation retention policies. Used in conjunction
 * with the {@link Retention} annotation to specify an annotation's time-to-live
 * in the overall development life cycle.
 *
 * @since 1.5
 */
public enum RetentionPolicy {
    /**
     * Annotation is only available in the source code.
     */
    SOURCE,
    /**
     * Annotation is available in the source code and in the class file, but not
     * at runtime. This is the default policy.
     */
    CLASS,
    /**
     * Annotation is available in the source code, the class file and is
     * available at runtime.
     */
    RUNTIME
}

@Target
用来声明注解可以被添加在哪些类型的元素上，如类型、方法和域等。
/**
 * Defines an enumeration for Java program elements. It is used in conjunction
 * with the {@link Target} meta-annotation to restrict the use of an annotation
 * to certain program elements.
 *
 * @since 1.5
 */
public enum ElementType {
    /**
     * Class, interface or enum declaration.
     */
    TYPE,
    /**
     * Field declaration.
     */
    FIELD,
    /**
     * Method declaration.
     */
    METHOD,
    /**
     * Parameter declaration.
     */
    PARAMETER,
    /**
     * Constructor declaration.
     */
    CONSTRUCTOR,
    /**
     * Local variable declaration.
     */
    LOCAL_VARIABLE,
    /**
     * Annotation type declaration.
     */
    ANNOTATION_TYPE,
    /**
     * Package declaration.
     */
    PACKAGE
}

