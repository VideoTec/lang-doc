Static Nested Classes

As with class methods and variables, a static nested class is associated with its outer class. And like static class methods, a static nested class cannot refer directly to instance variables or methods defined in its enclosing class: it can use them only through an object reference.

Note: A static nested class interacts with the instance members of its outer class (and other classes) just like any other top-level class. In effect, a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.
Static nested classes are accessed using the enclosing class name:

OuterClass.StaticNestedClass
For example, to create an object for the static nested class, use this syntax:

OuterClass.StaticNestedClass nestedObject =
     new OuterClass.StaticNestedClass();

--------------------------------------------------------------------------
https://en.wikipedia.org/wiki/Inner_class#Types_of_nested_classes_in_Java
--------------------------------------------------------------------------

Static member class, also called static nested classes[1] - 
They are declared static. 
Like other things in static scope (i.e. static methods), 
they do not have an enclosing instance, 
and cannot access instance variables and methods of the enclosing class. 

They are almost identical to non-nested classes except for scope details 
(they can refer to static variables and methods of the enclosing class without qualifying the name; other classes that are not one of its enclosing classes have to qualify its name with its enclosing class's name). 

Nested interfaces are implicitly static.