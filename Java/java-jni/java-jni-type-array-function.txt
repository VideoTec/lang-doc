jni 数组操作

primitive [英][ˈprɪmətɪv] [美][ˈprɪmɪtɪv] 原生的, 在这里指的是 java 中的对象

jsize GetArrayLength(JNIEnv *env, jarray array);

jobjectArray NewObjectArray(JNIEnv *env, jsize length, jclass elementClass, jobject initialElement);
jobject GetObjectArrayElement(JNIEnv *env, jobjectArray array, jsize index);
void SetObjectArrayElement(JNIEnv *env, jobjectArray array, jsize index, jobject value);

void * GetPrimitiveArrayCritical(JNIEnv *env, jarray array, jboolean *isCopy);
void ReleasePrimitiveArrayCritical(JNIEnv *env, jarray array, void *carray, jint mode);

void Set<PrimitiveType>ArrayRegion(JNIEnv *env, ArrayType array, jsize start, jsize len, const NativeType *buf);
copies back a region of a primitive array from a buffer.

void Get<PrimitiveType>ArrayRegion(JNIEnv *env, ArrayType array, jsize start, jsize len, NativeType *buf);
copies a region of a primitive array into a buffer.

ArrayType New<PrimitiveType>Array(JNIEnv *env, jsize length);
NewBooleanArray()  jbooleanArray
NewByteArray()     jbyteArray
NewCharArray()     jcharArray
NewShortArray()    jshortArray
NewIntArray()      jintArray
NewLongArray()     jlongArray
NewFloatArray()    jfloatArray
NewDoubleArray()   jdoubleArray

把 java 层中的数组取到 c 层中
NativeType *Get<PrimitiveType>ArrayElements(JNIEnv *env, ArrayType array, jboolean *isCopy);
GetBooleanArrayElements()      jbooleanArray   jboolean
GetByteArrayElements()         jbyteArray      jbyte
GetCharArrayElements()         jcharArray      jchar
GetShortArrayElements()        jshortArray     jshort
GetIntArrayElements()          jintArray       jint
GetLongArrayElements()         jlongArray      jlong
GetFloatArrayElements()        jfloatArray     jfloat
GetDoubleArrayElements()       jdoubleArray    jdouble
A family of functions that returns the body of the primitive array. 
The result is valid until the corresponding Release<PrimitiveType>ArrayElements() function is called. Since the returned array may be a copy of the Java array, changes made to the returned array will not necessarily be reflected in the original array until Release<PrimitiveType>ArrayElements() is called.

If isCopy is not NULL, then *isCopy is set to JNI_TRUE if a copy is made; or it is set to JNI_FALSE if no copy is made.

Regardless of how boolean arrays are represented in the Java VM, GetBooleanArrayElements() always returns a pointer to jbooleans, with each byte denoting an element (the unpacked representation). 

All arrays of other types are guaranteed to be contiguous in memory.


void Release<PrimitiveType>ArrayElements(JNIEnv *env, ArrayType array, NativeType *elems, jint mode);
ReleaseBooleanArrayElements()       jbooleanArray  jboolean
ReleaseByteArrayElements()          jbyteArray     jbyte
ReleaseCharArrayElements()          jcharArray     jchar
ReleaseShortArrayElements()         jshortArray    jshort
ReleaseIntArrayElements()           jintArray      jint
ReleaseLongArrayElements()          jlongArray     jlong
ReleaseFloatArrayElements()         jfloatArray    jfloat
ReleaseDoubleArrayElements()        jdoubleArray   jdouble

A family of functions that informs the VM that the native code no longer needs access to elems. The elems argument is a pointer derived from array using the corresponding Get<PrimitiveType>ArrayElements() function. If necessary, this function copies back all changes made to elems to the original array.

The mode argument provides information on how the array buffer should be released. mode has no effect if elems is not a copy of the elements in array. Otherwise, mode has the following impact, as shown in the following table:

Table 4-10 Primitive Array Release Modes
mode         actions
0            copy back the content and free the elems buffer
JNI_COMMIT   copy back the content but do not free the elems buffer
JNI_ABORT    free the buffer without copying back the possible changes

In most cases, programmers pass “0” to the mode argument to ensure consistent behavior for both pinned and copied arrays. 
The other options give the programmer more control over memory management and should be used with extreme care.