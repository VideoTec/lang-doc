http://stackoverflow.com/questions/2093112/why-i-should-not-reuse-a-jclass-and-or-jmethodid-in-jni

When working with JNI, it is necessary to ask the JNIEnv object for jclass and jmethodID for each class and method that will be used in the C/C++ code. Just to be clear, I want to call Java contructors or methods from C/C++.

把获取的 jclass/jmethodID 保存为全局变量，以减少重复计算。
Since the communication from Java to C/C++ (and viceversa) is costly, I initially thought that one way to minimize this was to reuse the jclass and jmethodID. Therefore, I saved this instances in global variables。

The questions are:

Why is it illegal to reuse the jclass and jmethodID thru different JNI functions? I thought that this values were always the same.

Just for curiosity: what is the impact/overhead of initializing all necessary jclass and jmethodID for each JNI function?

------------------------------
答案：
------------------------------
survive[英][səˈvaɪv] [美][sərˈvaɪv]
vi.幸存，活下来

The rules here are clear. 
Method ID and field ID values are forever. 
You can hang onto them. The lookups take some time.

jclass, on the other hand, is generally a local reference. 
This survive, at most, the duration of a single call to a JNI function.

If you need to optimize, you have to ask the JVM to make a global reference for you. It's not uncommon to acquire and keep references to common classes like java.lang.String.

Holding such a reference to a class will prevent it (the class) from being garbage-collected, of course.

jclass local = env->FindClass(CLS_JAVA_LANG_STRING);
_CHECK_JAVA_EXCEPTION(env);
java_lang_string_class = (jclass)env->NewGlobalRef(local);
_CHECK_JAVA_EXCEPTION(env);
env->DeleteLocalRef(local);
_CHECK_JAVA_EXCEPTION(env);