代码：
void session_state_change_cb(v6_session *session, const char *reason) {
  JNIEnv *env;
  printf("jni session@%X state change cb", (int)session);
  (*g_java_vm)->AttachCurrentThread(g_java_vm, &env, 0);
  (*env)->CallVoidMethod(env, session->getattachment(), g_method_callback_state_change);
}

g_method_callback_state_change 声明：
g_method_callback_state_change = (*env)->GetMethodID(env, clazz, "callbackStateChange", "(ILjava/lang/String;)V");

原因： 调用没有传递参数啊！！！！！！！！！
NativeType Call<type>Method(JNIEnv *env, jobject obj, jmethodID methodID, ...);

正确写法：
(*env)->CallVoidMethod(env, session->getattachment(), g_method_callback_state_change, session, );

---------------------------------------
CallVoidMethod 错误：
---------------------------------------

04-16 17:57:58.225 1934-1934/? I/DEBUG: *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
04-16 17:57:58.225 1934-1934/? I/DEBUG: Build fingerprint: 'samsung/m0zm/m0cmcc:4.3/JSS15J/I9308ZMUBNI1:user/release-keys'
04-16 17:57:58.225 1934-1934/? I/DEBUG: Revision: '12'
04-16 17:57:58.225 1934-1934/? I/DEBUG: pid: 13310, tid: 13324, name: no.rongfly:push  >>> com.feinno.rongfly:push <<<
04-16 17:57:58.225 1934-1934/? I/DEBUG: signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr deadd00d
04-16 17:57:58.460 1934-1934/? I/DEBUG:     r0 00000000  r1 00000000  r2 00000000  r3 40bd81a0
04-16 17:57:58.460 1934-1934/? I/DEBUG:     r4 deadd00d  r5 0000020c  r6 41f5afc0  r7 41e81568
04-16 17:57:58.460 1934-1934/? I/DEBUG:     r8 58a027e8  r9 6135e290  sl 00000001  fp 6135e2ac
04-16 17:57:58.460 1934-1934/? I/DEBUG:     ip 340c4001  sp 6135e020  lr 00000001  pc 40b682fc  cpsr 60000030
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d0  000000000000000f  d1  4024000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d2  4022000000000000  d3  3fe0000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d4  3fe1a254c8693000  d5  3ff0000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d6  3ff0000000000000  d7  0000000a00000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d8  0000000000000000  d9  0000000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d10 0000000000000000  d11 0000000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d12 0000000000000000  d13 0000000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d14 0000000000000000  d15 0000000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d16 3fe0000000000000  d17 416177e000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d18 42a2309ce5400000  d19 0065004e005f0061
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d20 401ffef9db22d0e5  d21 40bf3f0000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d22 3fd24998d6307188  d23 3fcc7288e957b53b
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d24 3fc74721cad6b0ed  d25 3fc2f112df3e5244
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d26 40bf3f0000000000  d27 4000000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d28 40008df2d49d41f1  d29 3fb0f4a31edab38b
04-16 17:57:58.460 1934-1934/? I/DEBUG:     d30 3ff0000000000000  d31 4000000000000000
04-16 17:57:58.460 1934-1934/? I/DEBUG:     scr 60000010
04-16 17:57:58.470 1934-1934/? I/DEBUG: backtrace:
04-16 17:57:58.475 1934-1934/? I/DEBUG:     #00  pc 000462fc  /system/lib/libdvm.so (dvmAbort+67)
04-16 17:57:58.475 1934-1934/? I/DEBUG:     #01  pc 0004ad4f  /system/lib/libdvm.so (dvmDecodeIndirectRef(Thread*, _jobject*)+146)
04-16 17:57:58.475 1934-1934/? I/DEBUG:     #02  pc 000609e3  /system/lib/libdvm.so (dvmCallMethodV(Thread*, Method const*, Object*, bool, JValue*, std::__va_list)+154)
04-16 17:57:58.475 1934-1934/? I/DEBUG:     #03  pc 0004ce83  /system/lib/libdvm.so
04-16 17:57:58.475 1934-1934/? I/DEBUG:     #04  pc 0004bd9f  /data/app-lib/com.feinno.rongfly-1/libv6sdk.so (session_state_change_cb+62)
04-16 17:57:58.475 1934-1934/? I/DEBUG:     #05  pc 0004cbcf  /data/app-lib/com.feinno.rongfly-1/libv6sdk.so (lua_statechange_callback+74)