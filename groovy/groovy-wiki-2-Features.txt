https://en.wikipedia.org/wiki/Groovy_(programming_language)

Most valid Java files are also valid Groovy files. 
Although the two languages are similar, 
Groovy code can be more compact, 
because it does not require all the elements that Java requires.[14] 
This makes it possible for Java programmers to learn Groovy gradually 
by starting with familiar Java syntax before acquiring more Groovy idioms.[15]

Groovy features not available in Java include 

1）both static and dynamic typing (with the def keyword), 
2）operator overloading, 
3）native syntax for lists and associative arrays (maps), 
4）native support for regular expressions, 
5）polymorphic iteration, 
6）expressions embedded inside strings, 
7）additional helper methods, and 

8）the safe navigation operator "?." 
to check automatically for nulls 
(for example, "variable?.method()", or "variable?.field").[16]

modularity 模块化

Since version 2 Groovy also supports 
1）modularity 
(being able to ship only the needed jars according to the project needs, thus reducing the size of groovy's lib), 
2）type checking, 
3）static compilation, 
4）Project Coin syntax enhancements, 
5）multicatch blocks and ongoing performance enhancements using JDK7's invoke dynamic instruction.[17]

Groovy provides native support for various markup languages such as XML and HTML, 
accomplished via an inline DOM syntax. 
This feature enables the definition 
and manipulation of many types of heterogeneous data assets with a uniform 
and concise syntax and programming methodology.[citation needed]

Unlike Java, 
a Groovy source code file can be executed as an (uncompiled) script 
if it contains code outside any class definition, 
if it is a class with a main method, or 
if it is a Runnable or GroovyTestCase. 

A Groovy script is fully parsed, compiled, and generated before execution (similar to Perl and Ruby). 
This occurs under the hood, 
and the compiled version is not saved as an artifact of the process.[18]