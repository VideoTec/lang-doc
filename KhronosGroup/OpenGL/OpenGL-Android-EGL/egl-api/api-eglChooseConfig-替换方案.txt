文档
https://www.khronos.org/registry/egl/sdk/docs/man/html/eglChooseConfig.xhtml

eglGetConfigs and eglGetConfigAttrib can be used to implement selection algorithms other than 
the generic one implemented by eglChooseConfig. 
第一步：Call 
eglGetConfigs to retrieve all the frame buffer configurations, or alternatively, 
all the frame buffer configurations with a particular set of attributes. 
第二步：Next call 
eglGetConfigAttrib to retrieve additional attributes for the frame buffer configurations and 
then select between them.

参考
-------------------------------------------------------------------------------------
http://directx.com/2014/06/egl-understanding-eglchooseconfig-then-ignoring-it/
-------------------------------------------------------------------------------------

// Get number of all configs, have gotten display from EGL
if ( EGL_FALSE == eglGetConfigs(_eglDisplay, NULL, 0, &numConfigs) )
    {
    queryEGLError();
    return EGL_FALSE;
    }
DebugMsg("there are %d configurations available.\n", numConfigs);
 
// collect information about the configs
EGLConfig *configs = new EGLConfig[numConfigs];
 
if ( EGL_FALSE == eglGetConfigs(_eglDisplay,configs,numConfigs,&numConfigs) )
    {
    queryEGLError();
    delete [] configs;
    return EGL_FALSE;
    }
 
std::vector<oglesBufferFormat> _bufferFormats;
 
oglesBufferFormat newFormat;
 
for ( GLint c = 0 ; c < numConfigs ; ++c)
    {
    EGLConfig config = configs[c]; 
    eglGetConfigAttrib( _eglDisplay, config, EGL_ALPHA_SIZE, &(newFormat._alpha_size));
    eglGetConfigAttrib( _eglDisplay, config, EGL_BIND_TO_TEXTURE_RGB, &(newFormat._bind_to_texture_rgb));
    eglGetConfigAttrib( _eglDisplay, config, EGL_BIND_TO_TEXTURE_RGBA, &(newFormat._bind_to_texture_rgba));
    eglGetConfigAttrib( _eglDisplay, config, EGL_BLUE_SIZE, &(newFormat._blue_size));
    eglGetConfigAttrib( _eglDisplay, config, EGL_BUFFER_SIZE, &(newFormat._buffer_size));
    eglGetConfigAttrib( _eglDisplay, config, EGL_CONFIG_CAVEAT, &(newFormat._config_caveat));
    eglGetConfigAttrib( _eglDisplay, config, EGL_CONFIG_ID, &(newFormat._config_id));
    eglGetConfigAttrib( _eglDisplay, config, EGL_DEPTH_SIZE, &(newFormat._depth_size));
    eglGetConfigAttrib( _eglDisplay, config, EGL_GREEN_SIZE, &(newFormat._green_size));
    eglGetConfigAttrib( _eglDisplay, config, EGL_LEVEL, &(newFormat._level));
    eglGetConfigAttrib( _eglDisplay, config, EGL_MAX_PBUFFER_WIDTH, &(newFormat._max_pbuffer_width));
    eglGetConfigAttrib( _eglDisplay, config, EGL_MAX_PBUFFER_HEIGHT, &(newFormat._max_pbuffer_height));
    eglGetConfigAttrib( _eglDisplay, config, EGL_MAX_PBUFFER_PIXELS, &(newFormat._max_pbuffer_pixels));
    eglGetConfigAttrib( _eglDisplay, config, EGL_MAX_SWAP_INTERVAL, &(newFormat._max_swap_interval));
    eglGetConfigAttrib( _eglDisplay, config, EGL_MIN_SWAP_INTERVAL, &(newFormat._min_swap_interval));
    eglGetConfigAttrib( _eglDisplay, config, EGL_NATIVE_RENDERABLE, &(newFormat._native_renderable));
    eglGetConfigAttrib( _eglDisplay, config, EGL_NATIVE_VISUAL_ID, &(newFormat._native_renderable));
    /// etc etc etc for all those that you care about
 
    if ( majorVersion >= 1 && minorVersion >= 2 )
        {       
        // 1.2
        eglGetConfigAttrib( _eglDisplay, config, EGL_ALPHA_MASK_SIZE, &(newFormat._alpha_mask_size));
        eglGetConfigAttrib( _eglDisplay, config, EGL_COLOR_BUFFER_TYPE, &(newFormat._color_buffer_type));
        eglGetConfigAttrib( _eglDisplay, config, EGL_LUMINANCE_SIZE, &(newFormat._luminance_size)); luminance[英][ˈlu:mɪnəns] [美][ˈlumənəns]
        eglGetConfigAttrib( _eglDisplay, config, EGL_RENDERABLE_TYPE, &(newFormat._renderable_type));
        }
 
    if ( majorVersion >= 1 && minorVersion >= 3 )
        {
        // 1.3
        eglGetConfigAttrib( _eglDisplay, config, EGL_CONFORMANT, &(newFormat._conformant));
        }
        _bufferFormats.push_back(newFormat);
    }